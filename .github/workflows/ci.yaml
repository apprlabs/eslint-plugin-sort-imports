name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/workflows/setup.yaml
        with:
          node-version: ${{ env.node-version }}

      - uses: ./.github/workflows/code-quality.yaml

      - name: Prepare coverage report in markdown
        uses: fingerprintjs/action-coverage-report-md@v2
        id: coverage

      - name: Publish coverage report
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Code Coverage
          message: ${{ steps.coverage.outputs.markdownReport }}

      - name: Add coverage report to the job summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.coverage.outputs.markdownReport }}" >> $GITHUB_STEP_SUMMARY

#      - name: Check if version increased
#        if: github.event_name == 'push'
#        id: version-check
#        run: |
#          CURRENT_VERSION=$(jq -r .version package.json)
#          LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
#          if [ "$CURRENT_VERSION" == "${LAST_TAG#v}" ]; then
#            echo "Version did not change. Skipping CD steps."
#            exit 0
#          fi
#          echo "version=$CURRENT_VERSION" >> "${GITHUB_OUTPUT}"
#
#      - name: Generate changelog entries
#        if: ${{ steps.version-check.outputs.version != '' }}
#        run: |
#          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 1
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#          git add CHANGELOG.md
#          git commit -m "docs: update changelog for version ${{ env.version }}"
#
#      - name: Create and push tag
#        if: ${{ steps.version-check.outputs.version != '' }}
#        run: |
#          TAG_NAME="v${{ env.version }}"
#          TAG_MESSAGE="Version ${{ env.version }} - $(date +"%Y-%m-%d")"
#          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
#          git push origin "$TAG_NAME"
#
#      - name: Create GitHub release
#        if: ${{ steps.version-check.outputs.version != '' }}
#        uses: ncipollo/release-action@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          tag: "v${{ env.version }}"
#          name: "Version ${{ env.version }}"
#          body: |
#            $(awk '/## \[${{ env.version }}\]/{flag=1;next}/## \[/&&flag{flag=0}flag' CHANGELOG.md)
#          draft: false
#          prerelease: ${{ contains(env.version, '-') }}